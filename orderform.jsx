// Code Generated by Sidekick is for learning and experimentation purposes only.
import React, { useState, useRef } from "react";
import htmlDocx from "html-docx-js/dist/html-docx";

/** Helper to generate initial rows for each loading */
const makeRows = () =>
  Array.from({ length: 7 }, () => ({ variety: "", pack: "", qty: "" }));

const OrderForm = () => {
  // State for static fields
  const [orderDate, setOrderDate] = useState("");
  const [orderNo, setOrderNo] = useState("");
  const [templateCount, setTemplateCount] = useState(1);
  const [note, setNote] = useState("");
  const [signature, setSignature] = useState("");

  // Dynamic block state for loadings
  const [drops, setDrops] = useState([
    {
      partyName: "",
      delivery: "",
      phone: "",
      gstNum: "",
      seedLicense: "",
      tableRows: makeRows(),
      otherReq: "",
    },
  ]);

  // Keep form as HTML string for export
  const formRef = useRef(null);

  // Handlers
  const updateDrop = (idx, key, value) => {
    const newDrops = drops.slice();
    newDrops[idx][key] = value;
    setDrops(newDrops);
  };
  const updateRow = (dropIdx, rowIdx, key, value) => {
    const newDrops = drops.slice();
    newDrops[dropIdx].tableRows[rowIdx][key] = value;
    setDrops(newDrops);
  };
  const handleTemplateSelect = (count) => {
    setTemplateCount(count);
    let arr = [];
    for (let i = 0; i < count; i++) {
      arr.push(
        drops[i] || {
          partyName: "",
          delivery: "",
          phone: "",
          gstNum: "",
          seedLicense: "",
          tableRows: makeRows(),
          otherReq: "",
        }
      );
    }
    setDrops(arr);
  };

  /** Export currently filled HTML as docx */
  const handleDownloadDocx = () => {
    // Code Generated by Sidekick is for learning and experimentation purposes only.
    const html = `<html>
      <head>
        <meta charset="utf-8" />
        <style>
        table, th, td { border:1px solid #000; border-collapse:collapse; padding:6px; }
        th {background:#f0f0f0;} .form-row {display:flex;gap:20px;}
        .form-col {margin-bottom:10px;}
        </style>
      </head>
      <body>${formRef.current.innerHTML}</body></html>`;
    const blob = htmlDocx.asBlob(html);
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "OrderForm.docx";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    setTimeout(() => URL.revokeObjectURL(url), 500);
  };

  return (
    <div style={{ margin: 20, fontFamily: "Arial, sans-serif" }}>
      <div ref={formRef}>
        <center>
          <h1>Annapurna Seeds</h1>
        </center>
        <center>
          <h2>ORDER FORM</h2>
        </center>
        <br />
        <div className="form-row" style={{ display: "flex", gap: 20, flexWrap: "wrap", marginBottom: 12 }}>
          <div className="form-col" style={{ flex: 1, minWidth: 220 }}>
            <label>
              <b>Company Name :</b>
            </label>
            <div>TIYASA AGRO PRODUCT PVT LTD</div>
            <label>
              <b>Address:</b>
            </label>
            <div>Amodpur, MEDINIPUR, West Begal 721146</div>
            <label>
              <b>GST No:</b>
            </label>
            <div>19AAJCT6448D1Z1</div>
            <label>
              <b>State:</b>
            </label>
            <div>West Bengal</div>
          </div>
          <div className="form-col" style={{ flex: 1, minWidth: 220 }}>
            <label htmlFor="date">
              <b>Date:</b>
            </label>
            <span> {orderDate}</span>
          </div>
          <div className="form-col" style={{ flex: 1, minWidth: 220 }}>
            <label htmlFor="orderNo">
              <b>TWB Order No:</b>
            </label>
            <span> {orderNo}</span>
          </div>
        </div>
        <b>
          <label htmlFor="templateCount">Select Number of loadings (1-3):</label>
        </b>
        <span>
          {templateCount}
        </span>
        <br />
        {/* Render drops */}
        {drops.map((drop, i) => (
          <div key={i} className="drop-block">
            <h2>Loading {i + 1}</h2>
            <div className="form-row" style={{display: "flex", gap: 20, flexWrap: "wrap", marginBottom: 12 }}>
              <div className="form-col" style={{ flex: 1, minWidth: 220 }}>
                <label>Party Name:</label> <span>{drop.partyName}</span>
              </div>
              <div className="form-col" style={{ flex: 1, minWidth: 220 }}>
                <label>Delivery Address:</label> <span>{drop.delivery}</span>
              </div>
              <div className="form-col" style={{ flex: 1, minWidth: 220 }}>
                <label>Consignee Phone Number:</label> <span>{drop.phone}</span>
              </div>
              <div className="form-col" style={{ flex: 1, minWidth: 220 }}>
                <label>GST Number:</label> <span>{drop.gstNum}</span>
              </div>
              <div className="form-col" style={{ flex: 1, minWidth: 220 }}>
                <label>Seed License Number:</label> <span>{drop.seedLicense}</span>
              </div>
            </div>
            <table style={{ width: "100%", borderCollapse: "collapse", marginTop: 12 }}>
              <thead>
                <tr>
                  <th>S. No</th>
                  <th>Variety</th>
                  <th>Packing Size</th>
                  <th>Required Quantity</th>
                </tr>
              </thead>
              <tbody>
                {drop.tableRows.map((row, j) => (
                  <tr key={j}>
                    <td>{j + 1}</td>
                    <td>{row.variety}</td>
                    <td>{row.pack}</td>
                    <td>{row.qty}</td>
                  </tr>
                ))}
              </tbody>
            </table>
            <div className="form-col" style={{ marginTop:10 }}>
              <label>Any Other Requirements/ Note:</label>
              <span> {drop.otherReq}</span>
            </div>
            <br />
          </div>
        ))}
        <br />
        <div className="form-row">
          <div className="form-col">
            <b>Note:</b> {note}
          </div>
          <div className="form-col">
            <b>Signature:</b> {signature}
          </div>
        </div>
      </div>
      {/* Input fields for user to fill in (outside exportable region) */}
      <hr />
      <form
        onSubmit={e => {
          e.preventDefault();
          handleDownloadDocx();
        }}
        style={{ marginTop: 24 }}
      >
        <div className="form-row">
          <div className="form-col">
            <label>Date:</label>
            <input
              type="date"
              value={orderDate}
              onChange={e => setOrderDate(e.target.value)}
              required
            />
          </div>
          <div className="form-col">
            <label>Order No:</label>
            <input
              type="text"
              placeholder="Enter order No (Prefix with TWB)"
              value={orderNo}
              onChange={e => setOrderNo(e.target.value)}
              required
            />
          </div>
          <div className="form-col">
            <label>Number of Loadings (1-3):</label>
            <select
              value={templateCount}
              onChange={e => handleTemplateSelect(Number(e.target.value))}
              required
            >
              <option value={1}>1</option>
              <option value={2}>2</option>
              <option value={3}>3</option>
            </select>
          </div>
        </div>
        {drops.map((drop, i) => (
          <div key={i} className="drop-block" style={{ border: "1px dashed #AAA", marginBottom: 16, padding: 8 }}>
            <h3>Loading {i + 1} Details</h3>
            <div className="form-row">
              <div className="form-col">
                <label>Party Name:</label>
                <input
                  type="text"
                  value={drop.partyName}
                  onChange={e => updateDrop(i, "partyName", e.target.value)}
                />
              </div>
              <div className="form-col">
                <label>Delivery Address:</label>
                <input
                  type="text"
                  value={drop.delivery}
                  onChange={e => updateDrop(i, "delivery", e.target.value)}
                />
              </div>
              <div className="form-col">
                <label>Consignee Phone:</label>
                <input
                  type="text"
                  value={drop.phone}
                  onChange={e => updateDrop(i, "phone", e.target.value)}
                />
              </div>
              <div className="form-col">
                <label>GST Number:</label>
                <input
                  type="text"
                  value={drop.gstNum}
                  onChange={e => updateDrop(i, "gstNum", e.target.value)}
                />
              </div>
              <div className="form-col">
                <label>Seed License Number:</label>
                <input
                  type="text"
                  value={drop.seedLicense}
                  onChange={e => updateDrop(i, "seedLicense", e.target.value)}
                />
              </div>
            </div>
            <table style={{ width: "100%", borderCollapse: "collapse", marginTop: 10 }}>
              <thead>
                <tr>
                  <th>S. No</th>
                  <th>Variety</th>
                  <th>Packing Size</th>
                  <th>Required Quantity</th>
                </tr>
              </thead>
              <tbody>
                {drop.tableRows.map((row, j) => (
                  <tr key={j}>
                    <td>{j + 1}</td>
                    <td>
                      <input
                        type="text"
                        value={row.variety}
                        onChange={e => updateRow(i, j, "variety", e.target.value)}
                        required={i === 0 && j === 0} // at least 1 req row
                      />
                    </td>
                    <td>
                      <input
                        type="text"
                        value={row.pack}
                        onChange={e => updateRow(i, j, "pack", e.target.value)}
                      />
                    </td>
                    <td>
                      <input
                        type="text"
                        value={row.qty}
                        onChange={e => updateRow(i, j, "qty", e.target.value)}
                      />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            <div className="form-col" style={{ marginTop: 10 }}>
              <label>Any Other Requirements/ Note:</label>
              <input
                type="text"
                value={drop.otherReq}
                onChange={e => updateDrop(i, "otherReq", e.target.value)}
              />
            </div>
          </div>
        ))}
        <div className="form-row">
          <div className="form-col">
            <label>Note:</label>
            <input
              type="text"
              value={note}
              onChange={e => setNote(e.target.value)}
            />
          </div>
          <div className="form-col">
            <label>Signature:</label>
            <input
              type="text"
              value={signature}
              onChange={e => setSignature(e.target.value)}
            />
          </div>
        </div>
        <button type="submit" style={{ marginTop: 24 }}>
          Download as DOCX
        </button>
      </form>
    </div>
  );
};

export default OrderForm;
